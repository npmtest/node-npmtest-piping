{"/home/travis/build/npmtest/node-npmtest-piping/test.js":"/* istanbul instrument in package npmtest_piping */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-piping/lib.npmtest_piping.js":"/* istanbul instrument in package npmtest_piping */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_piping = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_piping = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-piping/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-piping && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_piping */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_piping\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_piping.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_piping.rollup.js'] =\n            local.assetsDict['/assets.npmtest_piping.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_piping.__dirname + '/lib.npmtest_piping.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-piping/node_modules/piping/lib/piping.js":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = piping;\n\nvar _path = require(\"path\");\n\nvar path = _interopRequireWildcard(_path);\n\nrequire(\"colors\");\n\nvar _lodash = require(\"lodash\");\n\nvar _chokidar = require(\"chokidar\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar EventEmitter = require(\"events\");\nvar cluster = require(\"cluster\");\nvar defaultOptions = {\n  hook: false,\n  includeModules: false,\n  main: process.argv[1],\n  args: process.argv.slice(2),\n  ignore: /(\\/\\.|~\\$)/,\n  respawnOnExit: false,\n  throw: true,\n  quiet: false\n};\n\nvar emitter = new EventEmitter();\n\n/**\n * Function called on supervisor process to watch files and handle reloads\n */\nfunction monitor(options, ready) {\n  var root = options.hook ? options.main : path.dirname(options.main);\n\n  var watcher = (0, _chokidar.watch)(root, {\n    ignored: options.ignore,\n    ignoreInitial: true,\n    usePolling: options.usePolling,\n    interval: options.interval || 100,\n    binaryInterval: options.binaryInterval || 300\n  });\n\n  cluster.setupMaster({\n    exec: options.main,\n    args: options.args\n  });\n\n  var fork = cluster.fork.bind(cluster, options.env);\n\n  var main = null;\n  var kill = null;\n  var status = {\n    exiting: false,\n    exited: false,\n    firstRun: true,\n    exitReason: null,\n    fileChanged: null\n  };\n\n  // Handle unrequested exits\n  cluster.on(\"exit\", function (worker, code, signal) {\n    if (!status.exited) {\n      status.exitReason = code == 0 ? \"exited\" : \"errored\";\n      emitter.emit(\"exited\", status);\n      if (options.respawnOnExit) fork();\n    }\n  });\n\n  // Application started\n  cluster.on(\"online\", function (worker) {\n    status.exiting = false;\n    status.exiting = false;\n    main = worker;\n\n    if (status.firstRun) {\n      emitter.emit(\"started\", status);\n      status.firstRun = false;\n    } else {\n      worker.send({ status: status });\n      emitter.emit(\"reloaded\", status);\n    }\n\n    worker.on(\"message\", function (worker, message, handle) {\n      if (arguments.length === 2) {\n        handle = message;\n        message = worker;\n        worker = undefined;\n      }\n      if (message.file) {\n        // Handle messages about new files to watch\n        watcher.add(message.file);\n        emitter.emit(\"watch\", message.file);\n      }\n      if (message.exiting) {\n        // Handle messages acknowledging reloads\n        emitter.emit(\"waiting\", status);\n        clearTimeout(kill);\n      }\n    });\n  });\n\n  // Handle file changes\n  watcher.on(\"change\", function (file) {\n    if (!main || status.exiting) return; // No process is running yet, nothing to do.\n    var filename = path.relative(process.cwd(), file);\n    options.quiet || console.log(\"[piping]\".bold.red, \"File\", filename, \"has changed, reloading.\");\n\n    if (!main.isConnected()) return fork(); // Old process is dead, just start new one\n\n    // Schedule a kill if graceful reload fails\n    kill = setTimeout(function () {\n      status.exitReason = \"killed\";\n      main.disconnect();\n      main.process.kill();\n    }, 1000);\n\n    status.exiting = true;\n    status.exitReason = \"requested\";\n    status.fileChanged = file;\n    emitter.emit(\"reloading\", status);\n    main.send({ status: status }); // Tell the process to exit\n    main.once(\"disconnect\", function () {\n      // Handle graceful exit by restarting\n      clearTimeout(kill);\n      if (status.exiting) {\n        status.exiting = false;\n        status.exited = true;\n        fork();\n      }\n    });\n  });\n\n  emitter.stop = function () {\n    main.process.kill();\n  };\n\n  ready && ready(emitter);\n  fork();\n}\n\nfunction piping(options, ready) {\n  if ((0, _lodash.isFunction)(options)) {\n    ready = options;\n    options = null;\n  }\n  if ((0, _lodash.isString)(options)) {\n    options = (0, _lodash.assign)(defaultOptions, { main: options });\n  } else {\n    options = (0, _lodash.assign)(defaultOptions, options);\n  }\n  options.main = path.resolve(options.main);\n\n  // First run, need to start monitor\n  if (cluster.isMaster) {\n    if (options.throw) {\n      (function () {\n        // Avoid executing rest of file by use of an exception we then handle with\n        // the node uncaughtException handler. Will not work inside a try/catch block.\n        var uncaught = \"uncaughtException\";\n        var listeners = process.listeners(uncaught);\n        process.removeAllListeners(uncaught); // Clean up all existing listeners temporarily\n        process.on(uncaught, function () {\n          listeners.forEach(function (listener) {\n            // Re-add old listeners\n            process.on(uncaught, listener);\n          });\n          monitor(options, ready); // Good to go, no more stack\n        });\n        throw new Error();\n      })();\n    }\n    // Otherwise we just return false, caller is responsible for not running application code\n    monitor(options, ready);\n    return false;\n  }\n\n  // At this point, we are the supervised application process on the second run\n  var worker = cluster.worker;\n  var kill = worker.kill.bind(worker);\n\n  // Exit this process, potentially informing the supervisor we are handling it\n  function exit() {\n    if (emitter.emit(\"reload\", kill)) {\n      worker.send({ exiting: true });\n    } else {\n      setTimeout(kill, 500);\n    }\n  }\n\n  worker.on(\"message\", function (_ref) {\n    var status = _ref.status;\n\n    if (status) {\n      if (status.exiting) exit(); // Message is telling us to exit\n      else emitter.emit(\"reloaded\", status); // Otherwise, we have just reloaded\n    }\n  });\n\n  if (options.hook) {\n    (function () {\n      // Patch module loading\n      var module = require(\"module\");\n\n      var load = module._load;\n\n      module._load = function (name, parent, isMain) {\n        var file = module._resolveFilename(name, parent, isMain);\n\n        // Ignore module files unless includeModules is set\n        if (name[0] === \".\" || options.includeModules && file.indexOf(\"node_modules\") > 0) {\n          worker.send({ file: file }); // Tell supervisor about the file\n        }\n\n        return load(name, parent, isMain);\n      };\n    })();\n  }\n\n  return emitter;\n}\n\nmodule.exports = piping;","/home/travis/build/npmtest/node-npmtest-piping/node_modules/piping/src/piping.js":"import * as path from \"path\";\nimport \"colors\"\nimport { assign, isString, isNull, isFunction, isBoolean, values } from \"lodash\";\nimport { watch } from \"chokidar\";\n\nconst EventEmitter = require(\"events\");\nconst cluster = require(\"cluster\");\nconst defaultOptions = {\n  hook: false,\n  includeModules: false,\n  main: process.argv[1],\n  args: process.argv.slice(2),\n  ignore: /(\\/\\.|~\\$)/,\n  respawnOnExit: false,\n  throw: true,\n  quiet: false\n};\n\nconst emitter = new EventEmitter();\n\n/**\n * Function called on supervisor process to watch files and handle reloads\n */\nfunction monitor(options, ready) {\n  const root = options.hook ? options.main : path.dirname(options.main);\n\n  const watcher = watch(root, {\n    ignored: options.ignore,\n    ignoreInitial: true,\n    usePolling: options.usePolling,\n    interval: options.interval || 100,\n    binaryInterval: options.binaryInterval || 300\n  });\n\n  cluster.setupMaster({\n    exec: options.main,\n    args: options.args\n  });\n\n  const fork = cluster.fork.bind(cluster, options.env);\n\n  let main = null;\n  let kill = null;\n  const status = {\n    exiting: false,\n    exited: false,\n    firstRun: true,\n    exitReason: null,\n    fileChanged: null,\n  };\n\n  // Handle unrequested exits\n  cluster.on(\"exit\", function(worker, code, signal) {\n    if (!status.exited) {\n      status.exitReason = code == 0 ? \"exited\" : \"errored\";\n      emitter.emit(\"exited\", status);\n      if (options.respawnOnExit) fork();\n    }\n  });\n\n  // Application started\n  cluster.on(\"online\", function(worker) {\n    status.exiting = false;\n    status.exiting = false;\n    main = worker;\n\n    if (status.firstRun) {\n      emitter.emit(\"started\", status);\n      status.firstRun = false;\n    } else {\n      worker.send({status});\n      emitter.emit(\"reloaded\", status);\n    }\n\n\n    worker.on(\"message\", function(worker, message, handle) {\n      if (arguments.length === 2) {\n        handle = message;\n        message = worker;\n        worker = undefined;\n      }\n      if (message.file) { // Handle messages about new files to watch\n        watcher.add(message.file);\n        emitter.emit(\"watch\", message.file);\n      }\n      if (message.exiting) { // Handle messages acknowledging reloads\n        emitter.emit(\"waiting\", status);\n        clearTimeout(kill);\n      }\n    });\n  });\n\n  // Handle file changes\n  watcher.on(\"change\", function(file) {\n    if (!main || status.exiting) return; // No process is running yet, nothing to do.\n    const filename = path.relative(process.cwd(), file);\n    options.quiet || console.log(\"[piping]\".bold.red, \"File\", filename, \"has changed, reloading.\");\n\n    if (!main.isConnected()) return fork(); // Old process is dead, just start new one\n\n    // Schedule a kill if graceful reload fails\n    kill = setTimeout(function() {\n      status.exitReason = \"killed\";\n      main.disconnect();\n      main.process.kill();\n    }, 1000);\n\n    status.exiting = true;\n    status.exitReason = \"requested\";\n    status.fileChanged = file;\n    emitter.emit(\"reloading\", status);\n    main.send({status}); // Tell the process to exit\n    main.once(\"disconnect\", function() { // Handle graceful exit by restarting\n      clearTimeout(kill);\n      if (status.exiting) {\n        status.exiting = false;\n        status.exited = true;\n        fork();\n      }\n    });\n  });\n\n  emitter.stop = function() {\n    main.process.kill();\n  }\n\n  ready && ready(emitter);\n  fork();\n}\n\nexport default function piping(options, ready) {\n  if (isFunction(options)) {\n    ready = options;\n    options = null;\n  }\n  if (isString(options)) {\n    options = assign(defaultOptions, { main: options });\n  } else {\n    options = assign(defaultOptions, options);\n  }\n  options.main = path.resolve(options.main);\n\n  // First run, need to start monitor\n  if (cluster.isMaster) {\n    if (options.throw) {\n      // Avoid executing rest of file by use of an exception we then handle with\n      // the node uncaughtException handler. Will not work inside a try/catch block.\n      const uncaught = \"uncaughtException\";\n      const listeners = process.listeners(uncaught);\n      process.removeAllListeners(uncaught); // Clean up all existing listeners temporarily\n      process.on(uncaught, function() {\n        listeners.forEach(function(listener) { // Re-add old listeners\n          process.on(uncaught, listener)\n        });\n        monitor(options, ready); // Good to go, no more stack\n      });\n      throw new Error();\n    }\n    // Otherwise we just return false, caller is responsible for not running application code\n    monitor(options, ready);\n    return false;\n  }\n\n  // At this point, we are the supervised application process on the second run\n  const worker = cluster.worker;\n  const kill = worker.kill.bind(worker);\n\n  // Exit this process, potentially informing the supervisor we are handling it\n  function exit() {\n    if (emitter.emit(\"reload\", kill)) {\n      worker.send({exiting: true});\n    } else {\n      setTimeout(kill, 500)\n    }\n  }\n\n  worker.on(\"message\", function({status}) {\n    if (status) {\n      if (status.exiting) exit(); // Message is telling us to exit\n      else emitter.emit(\"reloaded\", status); // Otherwise, we have just reloaded\n    }\n  });\n\n  if (options.hook) {\n    // Patch module loading\n    const module = require(\"module\");\n\n    const load = module._load;\n\n    module._load = function(name, parent, isMain) {\n      const file = module._resolveFilename(name, parent, isMain);\n\n      // Ignore module files unless includeModules is set\n      if (name[0] === \".\" || (options.includeModules && file.indexOf(\"node_modules\") > 0)) {\n        worker.send({file}); // Tell supervisor about the file\n      }\n\n      return load(name, parent, isMain);\n    }\n  }\n\n\n  return emitter;\n}\n\nmodule.exports = piping;\n"}